// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ShopTechContext))]
    partial class ShopTechContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Enity.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("Domain.Enity.Cart", b =>
                {
                    b.Property<int>("ProductDetailId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ProductDetailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart", null, t =>
                        {
                            t.HasCheckConstraint("CK_Cart_Quantity_NonNegative", "[Quantity] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Enity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Domain.Enity.District", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("District", (string)null);
                });

            modelBuilder.Entity("Domain.Enity.ImageFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ImageFile", (string)null);
                });

            modelBuilder.Entity("Domain.Enity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrackingCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WardId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WardId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Domain.Enity.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductDetailId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductDetailId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Enity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MainImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MainImageId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Domain.Enity.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanFilter")
                        .HasColumnType("bit");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisplay")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductAttribute", (string)null);
                });

            modelBuilder.Entity("Domain.Enity.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("isHot")
                        .HasColumnType("bit");

                    b.Property<bool?>("isNew")
                        .HasColumnType("bit");

                    b.Property<bool?>("isSale")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Enity.ProductDetailAttribute", b =>
                {
                    b.Property<int>("ProductDetailId")
                        .HasColumnType("int");

                    b.Property<int>("ProductAttributeId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("UrlValue")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("ProductDetailId", "ProductAttributeId");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("ProductDetailAttribute", (string)null);
                });

            modelBuilder.Entity("Domain.Enity.Province", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Province", (string)null);
                });

            modelBuilder.Entity("Domain.Enity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Domain.Enity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdressDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cccd")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WardId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Cccd")
                        .IsUnique()
                        .HasFilter("[Cccd] IS NOT NULL");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("ImageId");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.HasIndex("WardId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Domain.Enity.Ward", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DistrictId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Ward", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.ProductDetailImage", b =>
                {
                    b.Property<int>("ProductDetailId")
                        .HasColumnType("int");

                    b.Property<int>("ImageFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductDetailId", "ImageFileId");

                    b.HasIndex("ImageFileId");

                    b.ToTable("ProductDetailImages", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.ProductImage", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ImageFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId", "ImageFileId");

                    b.HasIndex("ImageFileId");

                    b.ToTable("ProductImages", (string)null);
                });

            modelBuilder.Entity("Domain.Enity.Brand", b =>
                {
                    b.HasOne("Domain.Enity.ImageFile", "Image")
                        .WithMany("Brands")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Domain.Enity.Cart", b =>
                {
                    b.HasOne("Domain.Enity.ProductDetail", "ProductDetail")
                        .WithMany("Carts")
                        .HasForeignKey("ProductDetailId")
                        .IsRequired();

                    b.HasOne("Domain.Enity.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Enity.Category", b =>
                {
                    b.HasOne("Domain.Enity.ImageFile", "Image")
                        .WithMany("Categories")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Domain.Enity.District", b =>
                {
                    b.HasOne("Domain.Enity.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Domain.Enity.Order", b =>
                {
                    b.HasOne("Domain.Enity.User", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Enity.User", "Employee")
                        .WithMany("EmployeeOrders")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Domain.Enity.Ward", "Ward")
                        .WithMany("Orders")
                        .HasForeignKey("WardId");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Domain.Enity.OrderDetail", b =>
                {
                    b.HasOne("Domain.Enity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Enity.ProductDetail", "ProductDetail")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("Domain.Enity.Product", b =>
                {
                    b.HasOne("Domain.Enity.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("Domain.Enity.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Domain.Enity.ImageFile", "MainImage")
                        .WithMany("Products")
                        .HasForeignKey("MainImageId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("MainImage");
                });

            modelBuilder.Entity("Domain.Enity.ProductAttribute", b =>
                {
                    b.HasOne("Domain.Enity.Category", "Category")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Enity.ProductDetail", b =>
                {
                    b.HasOne("Domain.Enity.ImageFile", "Image")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ImageId");

                    b.HasOne("Domain.Enity.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId");

                    b.Navigation("Image");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Enity.ProductDetailAttribute", b =>
                {
                    b.HasOne("Domain.Enity.ImageFile", "Image")
                        .WithMany("ProductDetailAttributes")
                        .HasForeignKey("ImageId");

                    b.HasOne("Domain.Enity.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductDetailAttributes")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Enity.ProductDetail", "ProductDetail")
                        .WithMany("ProductDetailAttributes")
                        .HasForeignKey("ProductDetailId")
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("ProductAttribute");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("Domain.Enity.User", b =>
                {
                    b.HasOne("Domain.Enity.ImageFile", "Image")
                        .WithMany("Employees")
                        .HasForeignKey("ImageId");

                    b.HasOne("Domain.Enity.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId");

                    b.HasOne("Domain.Enity.Ward", "Ward")
                        .WithMany("Users")
                        .HasForeignKey("WardId");

                    b.Navigation("Image");

                    b.Navigation("Role");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Domain.Enity.Ward", b =>
                {
                    b.HasOne("Domain.Enity.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Domain.Entity.ProductDetailImage", b =>
                {
                    b.HasOne("Domain.Enity.ImageFile", "ImageFile")
                        .WithMany("ProductDetailImages")
                        .HasForeignKey("ImageFileId")
                        .IsRequired();

                    b.HasOne("Domain.Enity.ProductDetail", "ProductDetail")
                        .WithMany("ProductDetailImages")
                        .HasForeignKey("ProductDetailId")
                        .IsRequired();

                    b.Navigation("ImageFile");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("Domain.Entity.ProductImage", b =>
                {
                    b.HasOne("Domain.Enity.ImageFile", "ImageFile")
                        .WithMany("ProductImages")
                        .HasForeignKey("ImageFileId")
                        .IsRequired();

                    b.HasOne("Domain.Enity.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("ImageFile");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Enity.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Enity.Category", b =>
                {
                    b.Navigation("ProductAttributes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Enity.District", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("Domain.Enity.ImageFile", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("Categories");

                    b.Navigation("Employees");

                    b.Navigation("ProductDetailAttributes");

                    b.Navigation("ProductDetailImages");

                    b.Navigation("ProductDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Enity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Domain.Enity.Product", b =>
                {
                    b.Navigation("ProductDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("Domain.Enity.ProductAttribute", b =>
                {
                    b.Navigation("ProductDetailAttributes");
                });

            modelBuilder.Entity("Domain.Enity.ProductDetail", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductDetailAttributes");

                    b.Navigation("ProductDetailImages");
                });

            modelBuilder.Entity("Domain.Enity.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Domain.Enity.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Domain.Enity.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("CustomerOrders");

                    b.Navigation("EmployeeOrders");
                });

            modelBuilder.Entity("Domain.Enity.Ward", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
