 @{

}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - WebMvc</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    
    
    <!-- Prism.js for syntax highlighting -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Marked.js for Markdown parsing -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/9.1.2/marked.min.js"></script>
    <!-- Prism.js for syntax highlighting -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>

</head>
<body style="background-color: #f5f5f5;">

    @await Component.InvokeAsync("Header")

    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>
    @await Component.InvokeAsync("Footer")

    <!-- ChatBox -->
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;">
        <!-- Chat Toggle Button -->
        <button id="chatToggle" class="btn btn-primary rounded-circle shadow" style="width: 60px; height: 60px;">
            <i class="fas fa-comments"></i>
        </button>

        <!-- Chat Window -->
        <div id="chatWindow" class="card shadow-lg d-none" style="width: 500px; height: 500px; margin-bottom: 10px;">
            <!-- Chat Header -->
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h6 class="mb-0">
                    <i class="fas fa-headset me-2"></i>
                    SHOPTECH Support
                </h6>
                <button id="chatClose" class="btn btn-sm text-white">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <!-- Chat Body -->
            <div class="card-body p-0 d-flex flex-column" style="height: 400px;">
                <!-- Messages Container -->
                <div id="chatMessages" class="flex-grow-1 p-3 overflow-auto" style="max-height: 340px;">
                    <!-- Initial welcome message will be added here -->
                </div>

                <!-- Typing Indicator -->
                <div id="typingIndicator" class="px-3 py-2 d-none">
                    <div class="d-flex align-items-center text-muted">
                        <div class="spinner-border spinner-border-sm me-2" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <small>Đang trả lời...</small>
                    </div>
                </div>
            </div>

            <!-- Chat Footer -->
            <div class="card-footer p-2">
                <div class="input-group">
                    <input type="text" id="chatInput" class="form-control" placeholder="Nhập tin nhắn..." disabled>
                    <button id="chatSend" class="btn btn-primary" type="button" disabled>
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
   
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

    <style>
        /* Custom styles for markdown content in chat */
        .chat-message .markdown-content h1,
        .chat-message .markdown-content h2,
        .chat-message .markdown-content h3,
        .chat-message .markdown-content h4,
        .chat-message .markdown-content h5,
        .chat-message .markdown-content h6 {
            margin-top: 0.5rem;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }

        .chat-message .markdown-content p {
            margin-bottom: 0.5rem;
        }

            .chat-message .markdown-content p:last-child {
                margin-bottom: 0;
            }

        .chat-message .markdown-content ul,
        .chat-message .markdown-content ol {
            margin-bottom: 0.5rem;
            padding-left: 1.2rem;
        }

        .chat-message .markdown-content li {
            margin-bottom: 0.2rem;
        }

        .chat-message .markdown-content code {
            background-color: rgba(0,0,0,0.1);
            padding: 0.2rem 0.4rem;
            border-radius: 3px;
            font-size: 0.875rem;
        }

        .bg-primary .markdown-content code {
            background-color: rgba(255,255,255,0.2);
            color: #fff;
        }

        .chat-message .markdown-content pre {
            background-color: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 5px;
            padding: 0.75rem;
            margin: 0.5rem 0;
            overflow-x: auto;
            font-size: 0.875rem;
        }

        .bg-primary .markdown-content pre {
            background-color: rgba(255,255,255,0.1);
            border-color: rgba(255,255,255,0.2);
        }

        .chat-message .markdown-content blockquote {
            border-left: 4px solid #007bff;
            padding-left: 1rem;
            margin: 0.5rem 0;
            font-style: italic;
            opacity: 0.8;
        }

        .chat-message .markdown-content table {
            width: 100%;
            border-collapse: collapse;
            margin: 0.5rem 0;
            font-size: 0.875rem;
        }

        .chat-message .markdown-content th,
        .chat-message .markdown-content td {
            border: 1px solid #dee2e6;
            padding: 0.375rem;
            text-align: left;
        }

        .chat-message .markdown-content th {
            background-color: rgba(0,0,0,0.05);
            font-weight: 600;
        }

        .bg-primary .markdown-content th {
            background-color: rgba(255,255,255,0.1);
        }

        .bg-primary .markdown-content th,
        .bg-primary .markdown-content td {
            border-color: rgba(255,255,255,0.2);
        }

        .chat-message .markdown-content strong {
            font-weight: 600;
        }

        .chat-message .markdown-content em {
            font-style: italic;
        }

        .chat-message .markdown-content a {
            color: #007bff;
            text-decoration: underline;
        }

        .bg-primary .markdown-content a {
            color: #cce7ff;
        }

        .chat-message .markdown-content hr {
            border: none;
            border-top: 1px solid #dee2e6;
            margin: 0.75rem 0;
        }

        .bg-primary .markdown-content hr {
            border-top-color: rgba(255,255,255,0.3);
        }
    </style>

    <script>
            $.ajaxSetup({
            xhrFields: {
                withCredentials: true // Gửi cookie cho các yêu cầu cross-origin
            },
            error: function(xhr) {
                const response = xhr.responseJSON;
                toastr.error(response?.message || "Đã xảy ra lỗi khi thực hiện yêu cầu!");
            }
        });
    </script>


    @await Html.PartialAsync("_ToastrNotifications")
    @await RenderSectionAsync("Scripts", required: false)

    <!-- ChatBox scrip-->
    <script>
        $(document).ready(function() {
            let chatOpen = false;
            let isTyping = false;

            // Toggle chat window
            $('#chatToggle').click(function() {
                if (!chatOpen) {
                    $('#chatWindow').removeClass('d-none');
                    $('#chatToggle').addClass('d-none');
                    chatOpen = true;

                    // Add welcome message if not already added
                    if ($('#chatMessages').children().length === 0) {
                        addWelcomeMessage();
                    }
                } else {
                    $('#chatWindow').addClass('d-none');
                    $('#chatToggle').removeClass('d-none');
                    chatOpen = false;
                }
            });

            // Close chat
            $('#chatClose').click(function() {
                $('#chatWindow').addClass('d-none');
                $('#chatToggle').removeClass('d-none');
                chatOpen = false;
            });

            // Configure marked.js options
            marked.setOptions({
                breaks: true,
                gfm: true,
                sanitize: false,
                highlight: function(code, lang) {
                    if (Prism.languages[lang]) {
                        return Prism.highlight(code, Prism.languages[lang], lang);
                    }
                    return code;
                }
            });

            // Add welcome message
            function addWelcomeMessage() {
                const welcomeText = "**Chào mừng bạn đến với SHOPTECH**\n\nRất hân hạnh được phục vụ quý khách! 🎉\n\n*Hãy nhập câu hỏi của bạn bên dưới.*";
                const welcomeMsg = `
                    <div class="mb-3">
                        <div class="d-flex justify-content-start">
                            <div class="bg-light rounded p-3 shadow-sm chat-message" style="max-width: 80%;">
                                <small class="text-muted mb-2 d-block">
                                    <i class="fas fa-robot me-1"></i>SHOPTECH Support
                                </small>
                                <div class="markdown-content">${marked.parse(welcomeText)}</div>
                            </div>
                        </div>
                    </div>
                `;
                $('#chatMessages').append(welcomeMsg);
                scrollToBottom();

                // Enable input after welcome message
                setTimeout(function() {
                    $('#chatInput, #chatSend').prop('disabled', false);
                }, 1000);
            }

            // Send message
            function sendMessage() {
                const message = $('#chatInput').val().trim();
                if (message === '' || isTyping) return;

                // Add user message
                addUserMessage(message);
                $('#chatInput').val('');

                // Show typing indicator
                showTyping();

                // Send to API
                $.ajax({
                    url: 'api/Chat/send',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        message: message
                    }),
                    success: function(response) {
                        hideTyping();
                        addBotMessage(response.message || response);
                    },
                    error: function(xhr, status, error) {
                        hideTyping();
                        addBotMessage('Xin lỗi, có lỗi xảy ra. Vui lòng thử lại sau.');
                        console.error('Chat API Error:', error);
                    }
                });
            }

            // Add user message
            function addUserMessage(message) {
                const userMsg = `
                    <div class="mb-3">
                        <div class="d-flex justify-content-end">
                            <div class="bg-primary text-white rounded p-3 shadow-sm chat-message" style="max-width: 80%;">
                                <div class="markdown-content text-white">${marked.parse(message)}</div>
                                <small class="text-light opacity-75 mt-2 d-block">${getCurrentTime()}</small>
                            </div>
                        </div>
                    </div>
                `;
                $('#chatMessages').append(userMsg);
                scrollToBottom();
            }

            // Add bot message with Markdown support
            function addBotMessage(message) {
                const botMsg = `
                    <div class="mb-3">
                        <div class="d-flex justify-content-start">
                            <div class="bg-light rounded p-3 shadow-sm chat-message" style="max-width: 80%;">
                                <small class="text-muted mb-2 d-block">
                                    <i class="fas fa-robot me-1"></i>SHOPTECH Support
                                </small>
                                <div class="markdown-content">${marked.parse(message)}</div>
                                <small class="text-muted mt-2 d-block">${getCurrentTime()}</small>
                            </div>
                        </div>
                    </div>
                `;
                $('#chatMessages').append(botMsg);

                // Highlight code blocks after adding message
                Prism.highlightAllUnder($('#chatMessages')[0]);
                scrollToBottom();
            }

            // Show typing indicator
            function showTyping() {
                isTyping = true;
                $('#typingIndicator').removeClass('d-none');
                $('#chatInput, #chatSend').prop('disabled', true);
                scrollToBottom();
            }

            // Hide typing indicator
            function hideTyping() {
                isTyping = false;
                $('#typingIndicator').addClass('d-none');
                $('#chatInput, #chatSend').prop('disabled', false);
                $('#chatInput').focus();
            }

            // Scroll to bottom
            function scrollToBottom() {
                const chatMessages = document.getElementById('chatMessages');
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            // Get current time
            function getCurrentTime() {
                const now = new Date();
                return now.getHours().toString().padStart(2, '0') + ':' +
                       now.getMinutes().toString().padStart(2, '0');
            }

            // Escape HTML
            function escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }

            // Send message on button click
            $('#chatSend').click(sendMessage);

            // Send message on Enter key
            $('#chatInput').keypress(function(e) {
                if (e.which === 13) {
                    sendMessage();
                }
            });
        });
    </script>


</body>
</html>
